name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  lint:
    name: Lint (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13", "3.14"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install ruff
      - name: Run Ruff lint
        run: ruff check .

  test:
    name: Test (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13", "3.14"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-asyncio hypothesis coverage
      - name: Run pytest with coverage
        run: |
          coverage run --branch -m pytest
          coverage json -o .coverage.json
          python scripts/update_coverage_badges.py --coverage-json .coverage.json
      - name: Publish coverage badges to artifacts branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.python-version == '3.14'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo="https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}"
          tmpdir=$(mktemp -d)
          git clone --depth 1 --single-branch --branch badge-artifacts "$repo" "$tmpdir"
          mkdir -p "$tmpdir/badges"
          cp badges/coverage-lines.json "$tmpdir/badges/coverage-lines.json"
          cp badges/coverage-branches.json "$tmpdir/badges/coverage-branches.json"
          cd "$tmpdir"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add badges/coverage-lines.json badges/coverage-branches.json
          if git diff --cached --quiet; then
            echo "Coverage badges already up to date"
          else
            git commit -m ":test_tube: update coverage badges"
            git push --force-with-lease origin HEAD:badge-artifacts
          fi
          cd -
          rm -rf "$tmpdir"

  benchmark:
    name: Benchmark (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13", "3.14"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[benchmark]
      - name: Run benchmark suite
        run: python -m unirun_bench --profile all --samples 1 --duration 0.05 --limit 50000 --json > benchmark.json
      - name: Generate benchmark badge
        run: python scripts/update_benchmark_badge.py --input benchmark.json --output badges/benchmark.json
      - name: Publish benchmark badge to artifacts branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.python-version == '3.14'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo="https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}"
          tmpdir=$(mktemp -d)
          git clone --depth 1 --single-branch --branch badge-artifacts "$repo" "$tmpdir"
          mkdir -p "$tmpdir/badges"
          cp badges/benchmark.json "$tmpdir/badges/benchmark.json"
          cd "$tmpdir"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add badges/benchmark.json
          if git diff --cached --quiet; then
            echo "Benchmark badge already up to date"
          else
            git commit -m ":stopwatch: update benchmark badge"
            git push --force-with-lease origin HEAD:badge-artifacts
          fi
          cd -
          rm -rf "$tmpdir"
